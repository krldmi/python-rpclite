#!/usr/bin/python
#
import sys

from rpclite.server import XMLRPCServer, list_public_methods

try:
    addr = sys.argv[1], int(sys.argv[2])
except IndexError:
    addr = "localhost", 8021


class MyMethods:
    
    class Nested:
        def hello(self):
            return 'nested hello'
            
    def __init__(self):
        self.nested = MyMethods.Nested()

    def _listMethods(self):
        # if no nested classes, we did not need this one.
        return list_public_methods(self) + \
               list_public_methods(self.nested, prepend='nested.')

    def hello(self):
        import os, threading, socket
        args = self, threading.currentThread().getName(), os.getpid(), socket.gethostname()
        return "hello from %r thread '%s' in process %r on %r"%args

server = XMLRPCServer('class_server', addr)
#server.register_instance(MyMethods(), allow_dotted_names=True)
server.register_class(MyMethods, allow_dotted_names=True)

try:
    server.serve_forever()
except KeyboardInterrupt:
    pass
